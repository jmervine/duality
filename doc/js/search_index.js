var search_data = {"index":{"searchIndex":["duality","cachetimeout","notacache","clean()","delete()","flush()","get()","load()","method_missing()","new()","remove()","save()","set()"],"longSearchIndex":["duality","duality::cachetimeout","duality::notacache","duality#clean()","duality#delete()","duality#flush()","duality#get()","duality#load()","duality#method_missing()","duality::new()","duality#remove()","duality#save()","duality#set()"],"info":[["Duality","","Duality.html","",""],["Duality::CacheTimeout","","Duality/CacheTimeout.html","",""],["Duality::NotACache","","Duality/NotACache.html","",""],["clean","Duality","Duality.html#method-i-clean","()",""],["delete","Duality","Duality.html#method-i-delete","(key)","<p>Delete from both - async\n"],["flush","Duality","Duality.html#method-i-flush","()","<p>Flush caches - async\n"],["get","Duality","Duality.html#method-i-get","(key)","<p>Get from fast or slow.\n<p>returns nil if none are found\n\n"],["load","Duality","Duality.html#method-i-load","(key)",""],["method_missing","Duality","Duality.html#method-i-method_missing","(meth, *args, &block)","<p>Add support for other methods from passed caches this adds support only,\nbut no speed gains.\n<p>use “strict_” …\n\n"],["new","Duality","Duality.html#method-c-new","(fast, slow)",""],["remove","Duality","Duality.html#method-i-remove","(key)",""],["save","Duality","Duality.html#method-i-save","(key, value)",""],["set","Duality","Duality.html#method-i-set","(key, value)","<p>Set to fast and slow.\n<p>return true if both succeed\n<p>return false if either fail\n"]]}}